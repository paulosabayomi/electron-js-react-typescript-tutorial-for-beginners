import { app, BrowserWindow, ipcMain, Menu, MenuItemConstructorOptions } from 'electron';
import fs from 'fs'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const isMac = process.platform === 'darwin'

const template = [
  // { role: 'appMenu' }
  ...(isMac
    ? [{
        label: app.name,
        submenu: [
          { role: 'about' },
          { type: 'separator' },
          { role: 'services' },
          { type: 'separator' },
          { role: 'hide' },
          { role: 'hideOthers' },
          { role: 'unhide' },
          { type: 'separator' },
          { role: 'quit' }
        ]
      }]
    : []),
  // { role: 'fileMenu' }
  {
    label: 'File',
    submenu: [
      {
        label: 'Go Home',
        click: () => { 
          // event.sender.send('new-folder-update', get_dir(path))
          mainWindow.webContents.send('new-folder-update-menu', get_dir())
        },
      },
      isMac ? { role: 'close' } : { role: 'quit' }
    ]
  },
  // { role: 'editMenu' }
  {
    label: 'Edit',
    submenu: [
      { role: 'undo' },
      { role: 'redo' },
      { type: 'separator' },
      { role: 'cut' },
      { role: 'copy' },
      { role: 'paste' },
      ...(isMac
        ? [
            { role: 'pasteAndMatchStyle' },
            { role: 'delete' },
            { role: 'selectAll' },
            { type: 'separator' },
            {
              label: 'Speech',
              submenu: [
                { role: 'startSpeaking' },
                { role: 'stopSpeaking' }
              ]
            }
          ]
        : [
            { role: 'delete' },
            { type: 'separator' },
            { role: 'selectAll' }
          ])
    ]
  },
  // { role: 'viewMenu' }
  {
    label: 'View',
    submenu: [
      { role: 'reload' },
      { role: 'forceReload' },
      { role: 'toggleDevTools' },
      { type: 'separator' },
      { role: 'resetZoom' },
      { role: 'zoomIn' },
      { role: 'zoomOut' },
      { type: 'separator' },
      { role: 'togglefullscreen' }
    ]
  },
  // { role: 'windowMenu' }
  {
    label: 'Window',
    submenu: [
      { role: 'minimize' },
      { role: 'zoom' },
      ...(isMac
        ? [
            { type: 'separator' },
            { role: 'front' },
            { type: 'separator' },
            { role: 'window' }
          ]
        : [
            { role: 'close' }
          ])
    ]
  },
  {
    role: 'help',
    submenu: [
      {
        label: 'Learn More',
        click: async () => {
          const { shell } = require('electron')
          await shell.openExternal('https://electronjs.org')
        }
      }
    ]
  }
]

const menu = Menu.buildFromTemplate(template as any)
Menu.setApplicationMenu(menu)

const home_dir = {
  darwin: '/Users',
  linux: '/home',
  win32: 'C:\\Users',
}


const get_dir = (path?: string) => {
  return fs.readdirSync(path || home_dir[process.platform as keyof typeof home_dir], {withFileTypes: true})
      .filter(path => !path.name.startsWith('.'))
      .filter(path => path.isDirectory() || (!path.isDirectory() && path.name.endsWith('.mp3')))
      .map(path => ({...path, isDir: path.isDirectory()}))
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      devTools: false
    },
    frame: false
  });

  process.platform == 'darwin' && mainWindow.setWindowButtonVisibility(true);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Mac: /User/username
  // Linux: /home/username
  // Windows: C:\Users\username
  // process.platform

  

  ipcMain.handle('get-dir', (ev, path) => {
    const dirs = get_dir(path)
      
    console.log("dirs", dirs);
    return dirs    
  })

  ipcMain.handle('get-file', (ev, path) => {
    const file_content = fs.readFileSync(path)
    console.log("file_content", file_content);
    return file_content    
  })

  ipcMain.on('context-menu', (event, path) => {
    const template = [
      {
        label: 'Go Home',
        click: () => { 
          event.sender.send('new-folder-update', get_dir()) 
          // mainWindow.webContents.send('event-name', [])
        }
      },
      { type: 'separator' },
      { 
        label: 'Refresh', 
        click: () => { 
          event.sender.send('new-folder-update', get_dir(path))
          // mainWindow.webContents.send('event-name', [])
        },
      }
    ] as MenuItemConstructorOptions[]
    const menu = Menu.buildFromTemplate(template)
    menu.popup({ window: BrowserWindow.fromWebContents(event.sender) })
  })
  // ipcMain.on
  // ipcMain.once
  // ipcMain.handleOnce

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
